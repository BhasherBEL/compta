stages:
  - build
  - test
  - publish

default:
  image: "node:16-alpine"
  # https://docs.gitlab.com/ee/ci/pipelines/settings.html#auto-cancel-pending-pipelines
  interruptible: true
  # Retry automatically incase the runner times out or there's a runner failure
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  # Cache node_modules
  cache:
    paths:
      - node_modules/
      - public/build/
  tags:
    - linux

# Defines when the CI should automatically run.
# Set to run on:
# - merge request pipelines
# - tagged commits pipeline
# - scheduled or manually-triggered pipelines
workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"

rollup:
  stage: build
  before_script:
    - df -h /
    - free
    - npm --version
    - rm -rf public/build
    - npm ci
  script:
    - npx -- rollup --silent --compact -c

svelte-check:
  stage: test
  script:
    - npm run svelte-check

stylelint:
  stage: test
  script:
    - npm run stylelint

tslint:
  stage: test
  script:
    - npm run tslint

# Publishes compta to the gitlab container registry
# https://gitlab.com/groups/louvainlinux/-/container_registries
# Publishing jobs only run on non-scheduled nor manually triggered pipelines
# on release tags/branches, if the previous pipeline jobs succeeded
.publish:
  stage: publish
  before_script:
    - df -h /
    - free
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+/ && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "web"
      when: on_success
    - when: never

# Weekly publishing jobs only run on scheduled pipelines on default branch
# (main), if the previous pipeline jobs succeeded
.publish-weekly:
  stage: publish
  before_script:
    - df -h /
    - free
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
    - when: never

docker:
  extends: .publish
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    # Help kaniko identify that it is running in a container.
    # avoids this issue: https://github.com/GoogleContainerTools/kaniko/issues/1542
    - export container=docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination "${CI_REGISTRY_IMAGE}/compta:${CI_COMMIT_REF_NAME}"
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination "${CI_REGISTRY_IMAGE}/compta:latest"

docker-weekly:
  extends: .publish-weekly
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    # Help kaniko identify that it is running in a container.
    # avoids this issue: https://github.com/GoogleContainerTools/kaniko/issues/1542
    - export container=docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination "${CI_REGISTRY_IMAGE}/compta:latest"

pages:
  stage: publish
  script:
    - ls -RAl public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+/ && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "web"
      when: on_success
